name: package
on:
  push:
    paths:
      - '.github/workflows/build_windows.bash'
      - '.github/workflows/package.yml'
      - 'custom-prompt/*'
  workflow_dispatch:

jobs:
  build_windows:
    name: build on windows-2022
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}
    env:
        CMAKE_INSTALL_PREFIX: C:/ProgramData/libgit2
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          install: git make
          pacboy: cmake gcc pkgconf
      - uses: actions/checkout@v4
      - run: .github/workflows/build_libgit2.bash
        name: Build libgit2 for static linking
      # MSYS2 sets the environment variable used below, overriding what we
      # specify. Hence, define it from within MSYS2 just before it is needed.
      - run: |
          export PKG_CONFIG_PATH="$CMAKE_INSTALL_PREFIX/lib/pkgconfig"
          make LDFLAGS="-flto -O2 -static" LDLIBS="-lstdc++ -lwinhttp $(pkg-config --libs --static libgit2)" -j release
        working-directory: custom-prompt
        name: Build statically-linked Windows binaries
      - uses: actions/upload-artifact@v4
        with:
          name: custom-prompt-amd64-windows
          path: 'custom-prompt/bin'

  build_macos:
    name: build on ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.name }}
    strategy:
      matrix:
        os: [{name: 'macos-13', id: 'amd64-macos'}, {name: 'macos-14', id: 'aarch64-macos'}]
    steps:
      - uses: actions/checkout@v4
      - run: sudo .github/workflows/build_libgit2.bash
        name: Build libgit2 for static linking
      - run: make LDLIBS="-lstdc++ $(pkg-config --libs --static libgit2) -framework Cocoa -framework CoreGraphics" -j release
        working-directory: custom-prompt
        name: Build dynamically-linked macOS binaries
      - uses: actions/upload-artifact@v4
        with:
          name: custom-prompt-${{ matrix.os.id }}
          path: 'custom-prompt/bin'

  build_linux:
    name: build on ${{ matrix.arch }}/${{ matrix.os.name }}:${{ matrix.os.tag }}
    runs-on: ubuntu-22.04
    container: ${{ matrix.arch }}/${{ matrix.os.name }}:${{ matrix.os.tag }}
    strategy:
      matrix:
        arch: [amd64]
        os: [{name: 'alpine', tag: '3.20', libc: 'musl'}, {name: 'debian', tag: '12', libc: 'gnu'}]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.os.name == 'alpine'
        run: apk add build-base libgit2-dev libnotify-dev libx11-dev
      - if: matrix.os.name == 'debian'
        run: apt-get update && apt-get install -y build-essential libgit2-dev libnotify-dev libx11-dev
      - run: make -j release
        working-directory: custom-prompt
        name: Build dynamically-linked Linux binaries
      - uses: actions/upload-artifact@v4
        with:
          name: custom-prompt-${{ matrix.arch }}-linux-${{ matrix.os.libc }}
          path: 'custom-prompt/bin'

  release:
    if: github.ref_type == 'tag'
    needs: [build_windows, build_macos, build_linux]
    runs-on: ubuntu-22.04
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          chmod --recursive +x .
          for package_directory in custom-prompt-*
          do
            (
              cd $package_directory
              tar cfvz ${package_directory}.tgz *
            )
          done
        name: Create compressed archives of binaries
      - run: |
          gh release create ${{ github.ref_name }} -t ${{ github.ref_name }} -n "Linux binaries require libnotify and libgit2, and macOS, just libgit2. Windows binaries are statically linked." --generate-notes
          gh release upload ${{ github.ref_name }} */*.tgz
        name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
